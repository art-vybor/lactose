- Разобрать Scheme
    + Запуск Scheme из файла
    + 100 бутылок пива стоят на столе
    Сортировка
    Чтение из файла, консоли
    + Работа с функциями (лямбда)
- Разобрать Haskell
    Запуск Haskell из файла
    100 бутылок пива стоят на столе
    Сортировка
    Чтение из файла
    Работа с функциями (лямбда)
- Разобрать что-за синтаксический сахар требуется. На каждый случай написать краткое описание, пример целевого кода, мб в какой-нибудь РБНФ закодить.
    Haskell-like синтакс для функций
        1)sign x  | x > 0  = 1 (multiwayif)
                | x == 0 = 0
                | x < 0  = -1
        2) if a then b else c
        3) sign 0 = 0 (пример на Algebraic data type)
            sign a = if a > 0 then 1 else -1
        4) variable bindings (where a=1 and b=a**2)
        5)lambda как в haskell  \x y -> x+y 
    Включение кода на scheme:
        макросы?
        мб только функции?
    Арифметика из Guile (инфиксная)
    Что из пролог? Analysing and Constructing Terms
- Продумать цельную концепцую, определить главную фичу (haskell)
- Найти парсер грамматик по рбнф для python.
    antlr - bison-like парсер LL грамматик. Пример: https://github.com/antlr/grammars-v4
- Определить всё, что необходимо реализовать. Подумать как это будет работать. По возможности реализовать в виде отдельных функций на Lisp.
- Написать РБНФ для целевого языка.
- Написать лексер и парсер, строящий дерево.
- Написать компилятор полученного дерева в Lisp Scheme.
- Неплохо было бы замутить интерпретатор.
