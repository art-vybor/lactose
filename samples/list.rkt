#lang r5rs
(define (l) (list 2 3 1 4 6 5))
(define (sublist lst start end) (((lambda (f)
                 (lambda (x y)
                   (f f x y)))
               (lambda (head l n)
                 (if (= n 0)
                     '()
                     (cons (car l) (head head (cdr l) (- n 1)))))) (list-tail lst start) (- end start)))
(define (filter proc lst) (define (loop lst n) (if (= (length lst) n) lst (if (proc (list-ref lst n)) (loop lst (+ n 1)) (loop (append (((lambda (f)
                 (lambda (x y)
                   (f f x y)))
               (lambda (head l n)
                 (if (= n 0)
                     '()
                     (cons (car l) (head head (cdr l) (- n 1)))))) lst n) (list-tail lst (+ n 1))) n)))) (loop lst 0))
(define (sort l) (define (doit l) (define (pivot) (list-ref l 0)) (define (left) (filter (lambda (x) (< x (pivot))) l)) (define (center) (filter (lambda (x) (= x (pivot))) l)) (define (right) (filter (lambda (x) (> x (pivot))) l)) (append (sort (left)) (center) (sort (right)))) (if ((lambda (x y) (not (= x y))) (length l) 0) (doit l) (list)))
(define (print x) (display x) (newline))
(define (main) (print (sort (l))) (print (sublist (l) 2 4)))
(main)